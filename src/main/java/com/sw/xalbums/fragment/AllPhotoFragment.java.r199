package com.sw.xalbums.fragment;

import android.animation.Animator;
import android.animation.AnimatorSet;
import android.animation.IntEvaluator;
import android.animation.ObjectAnimator;
import android.animation.ValueAnimator;
import android.app.Fragment;
import android.content.Context;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.support.v7.widget.DefaultItemAnimator;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.GestureDetector;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.AnimationSet;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.ListView;

import com.sw.assetmgr.local.AllVirtualAlbumsManager;
import com.sw.assetmgr.local.AssetManagerFactory;
import com.sw.assetmgr.local.IAssetManager;
import com.sw.assetmgr.protocol.AlbumPhotosInfoGroup;
import com.sw.assetmgr.protocol.AssetItem;
import com.sw.xalbums.HomeActivity;
import com.sw.xalbums.R;
import com.sw.xalbums.adapter.CategoryListViewAdapter;
import com.sw.xalbums.adapter.PhotoRecyclerViewAdapter;
import com.sw.xalbums.util.ScreenUtil;
import com.sw.xalbums.view.DividerGridItemDecoration;
import com.sw.xalbums.view.DragFrameLayout;
import com.sw.xalbums.view.RecyclerTouchView;

import java.util.ArrayList;
import java.util.List;

/**
 * A simple {@link Fragment} subclass.
 * Activities that contain this fragment must implement the
 * {@link AllPhotoFragment.OnFragmentInteractionListener} interface
 * to handle interaction events.
 * Use the {@link AllPhotoFragment#newInstance} factory method to
 * create an instance of this fragment.
 */
public class AllPhotoFragment extends Fragment {
    // TODO: Rename parameter arguments, choose names that match
    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
    private static final String ARG_PARAM1 = "param1";
    private static final String ARG_PARAM2 = "param2";


    public static final  int PHOTO_MODE_FULL_SCREEN = 0;
    public static final  int PHOTO_MODE_RIGHT_SIDE = 1;

    public int photoMode = PHOTO_MODE_FULL_SCREEN;

    public static boolean ignoreResize = true;
    // TODO: Rename and change types of parameters
    private String mParam1;
    private String mParam2;

    private OnFragmentInteractionListener mListener;

    RecyclerTouchView mRecyclerView;
    ListView mLeftPanel;
    private GestureDetector mGestureDetector;
    List<AssetItem> mDatas = new ArrayList<>();
    PhotoRecyclerViewAdapter mRecycleAdapter;
    private DragFrameLayout dragFrameLayout;
    public AllPhotoFragment() {
        // Required empty public constructor

    }
    /**
     * Use this factory method to create a new instance of
     * this fragment using the provided parameters.
     *
     * @param param1 Parameter 1.
     * @param param2 Parameter 2.
     * @return A new instance of fragment AllPhotoFragment.
     */
    // TODO: Rename and change types and number of parameters
    public static AllPhotoFragment newInstance(String param1, String param2) {
        AllPhotoFragment fragment = new AllPhotoFragment();
        Bundle args = new Bundle();
        args.putString(ARG_PARAM1, param1);
        args.putString(ARG_PARAM2, param2);
        fragment.setArguments(args);

        return fragment;
    }

    public int getScreenMode()
    {
        return photoMode;
    }
    public void swapData(List<AssetItem> imageData)
    {
        mDatas = imageData;
        if(mRecycleAdapter != null)
            mRecycleAdapter.swapData(mDatas);
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            mParam1 = getArguments().getString(ARG_PARAM1);
            mParam2 = getArguments().getString(ARG_PARAM2);
        }


    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View fragmentView = inflater.inflate(R.layout.fragment_all_photo, container, false);

        mLeftPanel = (ListView)fragmentView.findViewById(R.id.leftPanel);
        mRecyclerView = (RecyclerTouchView) fragmentView.findViewById(R.id.rvView);
        mGestureDetector = new GestureDetector(getActivity(), new GestureListener(getActivity()));
        mRecyclerView.setLayoutManager(new GridLayoutManager(getActivity(), 4));
        mRecyclerView.addItemDecoration(new DividerGridItemDecoration(getActivity()));
        mRecyclerView.setItemAnimator(new DefaultItemAnimator());
        mRecyclerView.setGestureDetector(this.mGestureDetector);
        mRecycleAdapter = new PhotoRecyclerViewAdapter(getActivity(),mRecyclerView,mDatas);

        mRecyclerView.setAdapter(mRecycleAdapter);
        AllVirtualAlbumsManager assetManager = (AllVirtualAlbumsManager) AssetManagerFactory.getInstance(getActivity(),AssetManagerFactory.PHOTO_VIRTUAL_ALBUM_MGR);
        List<AlbumPhotosInfoGroup> groupsPhotos = assetManager.getAllGroupPhotos();//AlbumPhotosInfoGroup
        CategoryListViewAdapter listViewAdapter =  new CategoryListViewAdapter(getActivity(),mRecycleAdapter);
        mLeftPanel.setAdapter(listViewAdapter);

        dragFrameLayout = (DragFrameLayout) fragmentView.findViewById(R.id.dragframe);
        dragFrameLayout.setHoverItemListener(listViewAdapter);

        new Handler().post(new Runnable() {
            @Override
            public void run() {
                AnimatorSet aniSet  = generateAnimation("left", 0);
                aniSet.start();
            }
        });

        return fragmentView;
    }

    // TODO: Rename method, update argument and hook method into UI event
    public void onButtonPressed(Uri uri) {
        if (mListener != null) {
            mListener.onFragmentInteraction(uri);
        }
    }

    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
        if (context instanceof OnFragmentInteractionListener) {
            mListener = (OnFragmentInteractionListener) context;
        } else {
            throw new RuntimeException(context.toString()
                    + " must implement OnFragmentInteractionListener");
        }
    }

    @Override
    public void onDetach() {
        super.onDetach();
        mListener = null;
    }

    /**
     * This interface must be implemented by activities that contain this
     * fragment to allow an interaction in this fragment to be communicated
     * to the activity and potentially other fragments contained in that
     * activity.
     * <p>
     * See the Android Training lesson <a href=
     * "http://developer.android.com/training/basics/fragments/communicating.html"
     * >Communicating with Other Fragments</a> for more information.
     */
    public interface OnFragmentInteractionListener {
        // TODO: Update argument type and name
        void onFragmentInteraction(Uri uri);
    }

    public AnimatorSet generateAnimation(String direction, int duration) {
        AnimatorSet aniSet = new AnimatorSet();
        float leftWidth = this.mLeftPanel.getWidth();
        if (direction.equals("left")) {
            final int curRightWidth = this.mRecyclerView.getWidth();
            final int targetHeight = (int) (50 * ((float) (ScreenUtil.getScreenPxWidth(getActivity())) / (float) curRightWidth));
            float translationX = mRecyclerView.getTranslationX();
            ObjectAnimator moveRight = ObjectAnimator.ofFloat(mRecyclerView, "translationX", translationX, 0 - leftWidth);
            ObjectAnimator moveLeft = ObjectAnimator.ofFloat(mLeftPanel, "translationX", translationX, 0 - leftWidth);

            ValueAnimator valueAnimator = ValueAnimator.ofInt(1, 100);
            valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                //持有一个IntEvaluator对象，方便下面估值的时候使用
                private IntEvaluator mEvaluator = new IntEvaluator();

                @Override
                public void onAnimationUpdate(ValueAnimator animator) {
                    //获得当前动画的进度值，整型，1-100之间
                    int currentValue = (Integer) animator.getAnimatedValue();
                    //计算当前进度占整个动画过程的比例，浮点型，0-1之间
                    float fraction = currentValue / 100f;
                    //这里我偷懒了，不过有现成的干吗不用呢
                    //直接调用整型估值器通过比例计算出宽度，然后再设给Button
                    // mHomeAdapter.setItemHeight(mEvaluator.evaluate(fraction, 50, targetHeight));
                    mRecyclerView.getLayoutParams().width = mEvaluator.evaluate(fraction, curRightWidth, ScreenUtil.getScreenPxWidth(getActivity()));
                    mRecyclerView.requestLayout();
                }
            });
            aniSet.play(moveRight).with(moveLeft).with(valueAnimator);
        } else {
            final int curRightWidth = this.mRecyclerView.getWidth();
            final int curRightHeight = mRecyclerView.getHeight();
            final float translationX = mRecyclerView.getTranslationX();
            ObjectAnimator moveRight = ObjectAnimator.ofFloat(mRecyclerView, "translationX", translationX, 0f);
            ObjectAnimator moveLeft = ObjectAnimator.ofFloat(mLeftPanel, "translationX", translationX, 0f);
            ValueAnimator valueAnimator = ValueAnimator.ofInt(1, 100);
            valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                //持有一个IntEvaluator对象，方便下面估值的时候使用
                private IntEvaluator mEvaluator = new IntEvaluator();

                @Override
                public void onAnimationUpdate(ValueAnimator animator) {
                    //获得当前动画的进度值，整型，1-100之间
                    int currentValue = (Integer) animator.getAnimatedValue();
                    //计算当前进度占整个动画过程的比例，浮点型，0-1之间
                    float fraction = currentValue / 100f;
                    //这里我偷懒了，不过有现成的干吗不用呢
                    //直接调用整型估值器通过比例计算出宽度，然后再设给Button
                    //  mHomeAdapter.setItemHeight(mEvaluator.evaluate(fraction, 69, 50));
                    mRecyclerView.getLayoutParams().width = mEvaluator.evaluate(fraction, curRightWidth, (int) (curRightWidth + translationX));
                    mRecyclerView.requestLayout();
                }
            });
            aniSet.play(moveRight).with(moveLeft).with(valueAnimator);
        }
        aniSet.setDuration(duration);

        return aniSet;
    }

    private class GestureListener extends GestureDetector.SimpleOnGestureListener {

        private Context mContext;
        private HomeActivity mHomeActivity;
        public GestureListener(Context ctx) {
            mContext = ctx;
            mHomeActivity = (HomeActivity)mContext;
        }

        @Override
        public boolean onDown(MotionEvent e) {
            //捕获Down事件
            return true;
        }

        @Override
        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
                               float velocityY) {
            Log.d("xalbums", "catched fling event");
            float x1 = e1.getX();
            float x2 = e2.getX();
            float y1 = e1.getY();
            float y2 = e2.getY();
            if (x1 - x2 > 200 && Math.abs(y1 - y2) < 500 && Math.abs(velocityX) > 1000) {
                mHomeActivity.freezeToolBar(false);
                mHomeActivity.changeToggleIndicator(0);
                AnimatorSet aniSet = generateAnimation("left",200);
                aniSet.addListener(new Animator.AnimatorListener() {
                    @Override
                    public void onAnimationStart(Animator animation) {
                    }

                    @Override
                    public void onAnimationEnd(Animator animation) {
                        new Handler().postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                photoMode = PHOTO_MODE_FULL_SCREEN;
                                mRecycleAdapter.setPhotoMode(photoMode);
                            }
                        },10);

                    }

                    @Override
                    public void onAnimationCancel(Animator animation) {

                    }

                    @Override
                    public void onAnimationRepeat(Animator animation) {
                    }
                });
                aniSet.start();

            } else if (x1 - x2 < -200 && Math.abs(y1 - y2) < 500 && Math.abs(velocityX) > 1000) {
                AnimatorSet aniSet = generateAnimation("right",150);
                mHomeActivity.freezeToolBar(true);
                mHomeActivity.lockLeftDrawerClose(true);
                mHomeActivity.changeToggleIndicator(android.R.drawable.ic_input_add);
                aniSet.addListener(new Animator.AnimatorListener() {
                    @Override
                    public void onAnimationStart(Animator animation) {
                    }
                    @Override
                    public void onAnimationEnd(Animator animation) {
                        new Handler().postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                mHomeActivity.expandToolBar(false);
                                photoMode = PHOTO_MODE_RIGHT_SIDE;
                                mRecycleAdapter.setPhotoMode(photoMode);
                            }
                        },10);
                    }
                    @Override
                    public void onAnimationCancel(Animator animation) {

                    }
                    @Override
                    public void onAnimationRepeat(Animator animation) {
                    }
                });
                aniSet.start();
            }
            return true;
        }

        @Override
        public boolean onSingleTapUp(MotionEvent e) {
           View v = mRecyclerView.findChildViewUnder(e.getX(), e.getY());
            updateUI(v);
            return true;
        }

        @Override
        public boolean onDoubleTapEvent(MotionEvent e) {
           if(e.getAction() == MotionEvent.ACTION_UP)
           {
               return onSingleTapUp(e);
           }
            return false;
        }

        private void updateUI(View v)
        {
            if(v != null) {
                PhotoRecyclerViewAdapter.MyViewHolder viewHolder = ( PhotoRecyclerViewAdapter.MyViewHolder) mRecyclerView.getChildViewHolder(v);
                if(viewHolder != null)
                {
                    if(viewHolder.mType == PhotoRecyclerViewAdapter.ITEM_TYPE_IMG)
                    {
                        ImageView chk = (ImageView) v.findViewById(R.id.img_chk);
                        View layer = v.findViewById(R.id.opacityLayer);
                        if (photoMode == PHOTO_MODE_RIGHT_SIDE) {
                            if (chk.getVisibility() == View.INVISIBLE) {
                                chk.setVisibility(View.VISIBLE);
                                mRecycleAdapter.setSelected(mRecyclerView.getChildAdapterPosition(v), true);
                                layer.setVisibility(View.VISIBLE);
                            } else {
                                chk.setVisibility(View.INVISIBLE);
                                mRecycleAdapter.setSelected(mRecyclerView.getChildAdapterPosition(v), false);
                                layer.setVisibility(View.INVISIBLE);
                            }
                        }
                    }
                    else if(viewHolder.mType == PhotoRecyclerViewAdapter.ITEM_TYPE_DATE)
                    {
                        ImageView chk = (ImageView) v.findViewById(R.id.img_chk);
                        if (photoMode == PHOTO_MODE_RIGHT_SIDE) {
                            if (chk.getVisibility() == View.INVISIBLE) {
                                chk.setVisibility(View.VISIBLE);
                                mRecycleAdapter.setSelectedGroup(mRecyclerView.getChildAdapterPosition(v),true);
                            } else {
                                chk.setVisibility(View.INVISIBLE);
                                mRecycleAdapter.setSelectedGroup(mRecyclerView.getChildAdapterPosition(v),false);
                            }

                        }
                    }
                }

            }
        }
    }
}
